What happens when you initialize a repository? Why do you need to do it?

When you use 'git init' command, you create and initialize an empty .git repository.
The reason you would need to do this is for whenever you want to start a new document,
start a new project, muck around with some code, etc.

-------------------------------------

How is the staging area different from the working directory and the respoitory?
What value do you think it offers?

The staging area is a temporary field primarily used to bundle changed files into commits.
In terms of value, it brings connectivity between the working directory and the repository.
Without the staging area, there would be no way to commit more than
one file to the respotiroy; i.e., it would had to have been done
one file per commit at a time.

-------------------------------------

How can you use the staging area to make sure you have one commit per logical change?

With the staging area, you can compare the differences between:
Either the working directory and the staging area (git diff);
The staging area and the first commit (git diff --staged).

Using the git diff with the --staged argument
allows you to see what changes you've made prior to the commit.

-------------------------------------

What are some situations when branches would be helpful
in keeping your history organized? How would branches help?

Branches can be useful for when you want to test experimental features
but you want to keep the master branch intact, or when you want to make a different version of the project
that involves, say a different language. Using branches for these reasons will help you in testing features
you want to add to the master branch later.

-------------------------------------

How do the diagrams help you visualize the branch structure?

Drawing diagrams of your branches, as well as the commits each branch contains,
assists us with understanding not only a branch's initial commit, but also
gives us an idea of the project structure.

-------------------------------------

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

Through merging two branches, we commit the changes from one branch to another without destroying the former.
Representing it in the diagram as it was shows us how the merge process works; through merging,
we don't eliminate all the commits from the previous branch;
we just eliminate the label.

-------------------------------------

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

In terms of doing merges manually, you would have to always be aware of any changes
in the different branches and how they would affect the merge in particular.
Also, if you want to keep the good changes from both differing versions in your merge,
you would use manual merging over automatic merging.

-------------------------------------

